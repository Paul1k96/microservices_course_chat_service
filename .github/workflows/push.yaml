name: push

on:
  push:
    branches: [ main, master ]

env:
  REGISTRY: "docker.io"
  IMAGE_NAME: "paul1k888/microservice_course_chat"
  IMAGE_NAME_MIGRATION: "paul1k888/microservice_course_chat_migration"
  CONTAINER_NAME: "chat-svc"
  CONTAINER_NAME_MIGRATION: "chat-migration"
  CONTAINER_NAME_DB: "chat-db"
  IMAGE_POSTGRES: "postgres:14-alpine"
  MIGRATION_DIR: "./migrations"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache-dependency-path: go.sum

      - name: Build
        run: go build -o ./bin/ -v ./...

      - name: Test
        run: go test -v ./...

  linter:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          # Require: The version of golangci-lint to use.
          # When `install-mode` is `binary` (default) the value can be v1.2 or v1.2.3 or `latest` to use the latest version.
          # When `install-mode` is `goinstall` the value can be v1.2.3, `latest`, or the hash of a commit.
          version: v1.61

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          #
          # Note: By default, the `.golangci.yml` file should be at the root of the repository.
          # The location of the configuration file can be changed by using `--config=`
          args: --timeout=30m --config=./.golangci.yaml

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true, then all caching functionality will be completely disabled,
          #           takes precedence over all other caching options.
          # skip-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true, then the action won't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

          # Optional: The mode to install golangci-lint. It can be 'binary' or 'goinstall'.
          # install-mode: "goinstall"

  image-build-and-push:
    runs-on: ubuntu-latest
    needs:
      - build-and-test
      - linter

    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p '${{ secrets.REGISTRY_PASSWORD }}' $REGISTRY

      - name: Build and push migration
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx create --use
          docker buildx build --no-cache --push \
          --tag $REGISTRY/$IMAGE_NAME_MIGRATION:$TAG_NAME -f migrator.Dockerfile .

      - name: Build and Push Docker Image
        run: |
          TAG_NAME=$(echo $GITHUB_SHA | head -c7)
          docker buildx create --use
          docker buildx build --no-cache --push \
          --tag $REGISTRY/$IMAGE_NAME:$TAG_NAME -f Dockerfile .

  deploy-image:
    runs-on: ubuntu-latest
    needs: image-build-and-push

    steps:
      - name: Deploy to remote via SSH action
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_SSH_USERNAME }}
          password: ${{ secrets.SERVER_SSH_PASSWORD }}
          envs: IMAGE_NAME,REGISTRY,GITHUB_SHA,CONTAINER_NAME,IMAGE_NAME_MIGRATION,CONTAINER_NAME_MIGRATION,CONTAINER_NAME_DB,IMAGE_POSTGRES,MIGRATION_DIR
          script: |
            # Set up variables
            TAG_NAME=$(echo $GITHUB_SHA | head -c7)
            
            # Login into Selectel Registry
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p '${{ secrets.REGISTRY_PASSWORD }}' $REGISTRY
            
            # Create networks
            docker network create --internal chat_internal_network
            docker network create universe
            
            # Run postgres, if not exists
            docker run -d \
            -e POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            -p ${{ secrets.POSTGRES_PORT }}:5432 \
            -v chat_postgres:/var/lib/postgresql/data \
            --name $CONTAINER_NAME_DB \
            --network chat_internal_network \
            -t $REGISTRY/$IMAGE_POSTGRES
            
            # Stop running migration container
            docker stop $CONTAINER_NAME_MIGRATION
            
            # Remove old migration container
            docker rm $CONTAINER_NAME_MIGRATION
            
            # Update migration
            docker run -d --name $CONTAINER_NAME_MIGRATION \
            --env MIGRATION_DSN="host=$CONTAINER_NAME_DB user=${{ secrets.POSTGRES_USER }} password=${{ secrets.POSTGRES_PASSWORD }} dbname=${{ secrets.POSTGRES_DB }} sslmode=disable" \
            --env MIGRATION_DIR=$MIGRATION_DIR \
            --restart on-failure \
            --network chat_internal_network \
            -t $REGISTRY/$IMAGE_NAME_MIGRATION:$TAG_NAME
            
            # Stop running service container
            docker stop $CONTAINER_NAME
            
            # Remove old service container
            docker rm $CONTAINER_NAME
            
            # Run a new container from a new image
            docker run -d -p ${{ secrets.GRPC_PORT }}:50051 --name $CONTAINER_NAME \
            --env POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            --env POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            --env POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            --env POSTGRES_HOST=$CONTAINER_NAME_DB \
            --env POSTGRES_PORT=5432 \
            --env GRPC_PORT=50051 \
            --network chat_internal_network \
            -t $REGISTRY/$IMAGE_NAME:$TAG_NAME
            
            # Connect service to external network
            docker network connect universe $CONTAINER_NAME
            docker network connect universe $CONTAINER_NAME_DB || true